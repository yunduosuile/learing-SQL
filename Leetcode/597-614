597. 好友申请 I: 总体通过率 Easy

SELECT ROUND(IFNULL(
(SELECT COUNT(DISTINCT requester_id, accepter_id) FROM request_accepted) /
(SELECT COUNT(DISTINCT sender_id, send_to_id) FROM friend_request),0),2) accept_rate

# 通过统计两个值来求解

601. 体育馆的人流量 Hard

SELECT s1.id, s1.visit_date, s1.people
FROM stadium s1 JOIN stadium s2
ON s1.id != s2.id
WHERE s1.people >= 100 AND s2.people >= 100 
GROUP BY s1.id
HAVING SUM(s1.id - s2.id BETWEEN 0 AND 2) = 2 OR SUM(s2.id - s1.id BETWEEN 0 AND 2) = 2 OR 
       SUM(ABS(s1.id - s2.id) < 2) = 2
ORDER BY s1.id

# 这种方法在组过滤的时候有点麻烦

SELECT DISTINCT id, visit_date, people
FROM stadium, (SELECT s1.id i
               FROM stadium s1 JOIN stadium s2
               ON s1.id > s2.id
               WHERE s1.people >= 100 AND s2.people >= 100 
               GROUP BY s1.id
               HAVING SUM(s1.id - s2.id BETWEEN 0 AND 2) = 2) t1
WHERE id BETWEEN i-2 AND i
ORDER BY id

# 先找到一种情况然后找id

602. 好友申请 II: 谁有最多的好友 Medium

SELECT requester_id id, SUM(num) num FROM
(SELECT requester_id, COUNT(accepter_id) num
FROM request_accepted
GROUP BY requester_id
UNION ALL
SELECT accepter_id, COUNT(requester_id) num
FROM request_accepted
GROUP BY accepter_id) T1
GROUP BY requester_id
ORDER BY num DESC
LIMIT 1

# 使用UNION ALL不过滤相同值, 然后分别求每个用户的申请数与接受数, 再进行分组求和

SELECT requester_id id, COUNT(requester_id) num
FROM ((SELECT requester_id
      FROM request_accepted)
      UNION ALL
     (SELECT accepter_id
      FROM request_accepted)) s
GROUP BY requester_id
ORDER BY COUNT(*) DESC
LIMIT 1

# 显得更简单, 可以不分组直接全列出来然后再分组

603. 连续空余座位 Easy

SELECT DISTINCT seat_id
FROM cinema, (SELECT c1.seat_id id
              FROM cinema c1, cinema c2
              WHERE c1.seat_id > c2.seat_id AND c1.free = 1 AND c2.free = 1
              GROUP BY c1.seat_id
              HAVING SUM(c1.seat_id - c2.seat_id < 2) = 1) t
WHERE seat_id BETWEEN id-1 AND id
ORDER BY seat_id

# 连续问题, 思路参照601题

607. 销售员 Easy

SELECT name
FROM salesperson
WHERE sales_id NOT IN (SELECT sales_id
                       FROM orders, company
                       WHERE orders.com_id = company.com_id AND name = 'RED')

# 先找符合条件的, 然后进行排除

608. 树节点 Medium

SELECT DISTINCT t1.id Id, (CASE WHEN t1.p_id IS NULL THEN 'Root'
                                WHEN t2.id IS NULL THEN 'Leaf'
                                ELSE 'Inner'
                           END) Type
FROM tree t1 LEFT JOIN tree t2
ON t1.id = t2.p_id
ORDER BY t1.id

# 用CASE WHEN转变类型来解决

SELECT id Id, CASE WHEN p_id IS NULL THEN 'Root'
                   WHEN id IN (SELECT p_id FROM tree) THEN 'Inner'
                   ELSE 'Leaf'
              END Type
FROM tree
ORDER BY id

# 另一种写法

610. 判断三角形 Easy

SELECT x, y, z, CASE WHEN x+y>z AND x+z>y AND y+z>x THEN 'Yes'
                     ELSE 'No'
                END triangle
FROM triangle

# 简单

612. 平面上的最近距离 Medium

SELECT MIN(ROUND(SQRT(POWER(p1.x-p2.x,2)+POWER(p1.y-p2.y,2)),2)) shortest
FROM point_2d p1 JOIN point_2d p2
ON (p1.x, p1.y) != (p2.x, p2.y)

# 写联结就可以

613. 直线上的最近距离 Easy

SELECT ABS(p1.x - p2.x) shortest
FROM point p1 JOIN point p2
ON p1.x != p2.x
ORDER BY shortest
LIMIT 1

# 同上

614. 二级关注者 Medium

SELECT followee follower, COUNT(DISTINCT follower) num
FROM follow
WHERE followee IN (SELECT follower FROM follow)
GROUP BY followee
ORDER BY followee

# 要过滤一次重复值

# 597, 602, 603, 607, 608, 610, 612, 613, 614 Easy; 601 Medium
