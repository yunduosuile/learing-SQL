196. 删除重复的电子邮箱 Easy

DELETE P1.*
FROM Person P1, Person P2
WHERE P1.Email = P2.Email AND P1.Id > P2.Id

# Delete语句暂缓, 想法是先使用SELECT查找要删除的行然后换成DELETE 


197. 上升的温度 Easy

SELECT w1.Id
FROM Weather w1 JOIN Weather w2
ON DATEDIFF(w1.RecordDate, w2.RecordDate) = 1
WHERE w1.Temperature > w2.Temperature

# DATEDIFF()函数可以得到日期差, 差为第一个日期减去第二个日期

SELECT w1.Id
FROM Weather w1 JOIN Weather w2
ON TIMESTAMPDIFF(Day, w2.RecordDate, w1.RecordDate) = 1
WHERE w1.Temperature > w2.Temperature

# TIMESTAMPDIFF()更通用, 注意TIMESTAMPDIFF()与DATEDIFF()参数的差异


262. 行程和用户 Hard

SELECT Trips.Request_at Day, ROUND(1-SUM(Status = 'completed')/COUNT(Status),2) AS 'Cancellation Rate'
FROM Trips JOIN Users u1
ON Trips.Client_Id = u1.Users_Id
JOIN Users u2 ON Trips.Driver_Id = u2.Users_Id
WHERE u1.Role IN ('client', 'driver') AND u2.Role IN ('client', 'driver') AND u1.Banned = 'No' 
      AND u2.Banned = 'No' AND (Trips.Request_at BETWEEN '2013-10-01' AND '2013-10-03')
GROUP BY Day

# 使用SUM()和COUNT()来计算取消率, 注意WHERE语句中条件较多

SELECT Request_at Day, ROUND(1-SUM(Status = 'completed')/COUNT(Id),2) 'Cancellation Rate'
FROM Trips JOIN Users U1
ON Trips.Client_Id = U1.Users_Id 
JOIN Users U2 ON Trips.Driver_Id = U2.Users_Id
WHERE U1.Banned = 'No' AND U2.Banned = 'No' AND Request_at BETWEEN '2013-10-01' AND '2013-10-03'
GROUP BY Request_at
ORDER BY Day

# 注意这里不存在'partner'的问题, 下面写的更简单一点


511. 游戏玩法分析 I Easy

SELECT player_id, MIN(event_date) first_login
FROM Activity
GROUP BY player_id

# 简单, 分组取最小值即可


512. 游戏玩法分析 II Easy

SELECT a1.player_id, a1.device_id
FROM Activity a1
WHERE a1.event_date = (SELECT MIN(event_date)
                       FROM Activity a2
                       WHERE a1.player_id = a2.player_id)

# 使用子查询分组找到最小的日期


534. 游戏玩法分析 III Medium

SELECT A1.player_id, A1.event_date, SUM(A2.games_played) games_played_so_far
FROM Activity A1 JOIN Activity A2
ON A1.player_id = A2.player_id AND A1.event_date >= A2.event_date
GROUP BY A1.player_id, A1.event_date

# 使用自联结的方法可以得出结果


550. 游戏玩法分析 IV Medium

SELECT ROUND(
(SELECT COUNT(A1.player_id)
FROM Activity A1 JOIN Activity A2
ON A1.player_id = A2.player_id AND A1.event_date >= A2.event_date
WHERE DATEDIFF(A1.event_date, A2.event_date) = 1 AND
A2.event_date = (SELECT MIN(event_date)
                 FROM Activity A3
                 WHERE A1.player_id = A3.player_id))
/(SELECT COUNT(DISTINCT player_id) FROM Activity),2) fraction  

# 写好联结一步步慢慢来

SELECT ROUND(
(SELECT COUNT(A1.player_id)
 FROM Activity A1, (SELECT A2.player_id, A2.event_date
                    FROM Activity A2
                    WHERE A2.event_date = (SELECT MIN(event_date)
                                           FROM Activity A3
                                           WHERE A2.player_id = A3.player_id)) T1
 WHERE A1.player_id = T1.player_id AND DATEDIFF(A1.event_date, T1.event_date) = 1) / 
 (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) fraction
 
# 可能稍快一些, 构造一个满足条件的表

SELECT ROUND(SUM(DATEDIFF(A2.event_date, A1.event_date) = 1)/COUNT(DISTINCT A1.player_id),2) fraction
FROM Activity A1 JOIN Activity A2
ON A1.player_id = A2.player_id
WHERE (a1.player_id, a1.event_date) IN (SELECT player_id, MIN(event_date)
                                       FROM Activity
                                       GROUP BY player_id)
                                       
# 一次联结解决


569. 员工薪水中位数 Hard

SELECT Id, Company, Salary
FROM Employee
WHERE Id IN (SELECT E1.Id
             FROM Employee E1 JOIN Employee E2
             ON E1.Company = E2.Company
             GROUP BY E1.Id
             HAVING SUM(E1.Salary >= E2.Salary) >= COUNT(E2.Salary)/2 
             AND SUM(E1.Salary <= E2.Salary) >= COUNT(E2.Salary)/2)
GROUP BY Company, Salary
ORDER BY Company, Salary

# 注意求中位数时候的过滤条件
# 最外面的分组函数是因为一个公司有相同的工资为中位数.

570. 至少有5名直接下属的经理 Medium

SELECT Name
FROM Employee LEFT JOIN
(SELECT ManagerId, COUNT(ManagerId) num
FROM Employee e1
GROUP BY ManagerId) t1 
ON Employee.Id = t1.ManagerId
WHERE t1.num >= 5

# 先构造满足条件的表然后联结得出结果

SELECT Name
FROM Employee
WHERE ID IN (SELECT ManagerId
             FROM Employee
             GROUP BY ManagerId
             HAVING COUNT(DISTINCT ID) >= 5)
             
# 子查询也轻松加愉快

571. 给定数字的频率查询中位数 Hard

SELECT AVG(Numbers.Number) median
FROM (SELECT N1.Number, SUM(N2.Frequency) lf
      FROM Numbers N1, Numbers N2
      WHERE N1.Number >= N2.Number
      GROUP BY N1.Number) t1, Numbers, (SELECT SUM(Frequency) sf FROM Numbers) t2
WHERE t1.Number = Numbers.Number 
AND lf >= sf/2 AND sf-lf+Frequency >= sf/2

# 中位数 大于等于它的数超过总数的一半 and 小于等于它的数超过总数的一半
# 理解此题的Frequency即明白做法, 构造了两个表来构造条件

SELECT avg(Number) median
FROM Numbers
WHERE Number IN (SELECT N1.Number
FROM Numbers N1 JOIN Numbers N2
ON N1.Number >= N2.Number
GROUP BY N1.Number
HAVING SUM(N2.Frequency) >= (SELECT SUM(Frequency) FROM Numbers)/2
AND SUM(N2.Frequency) - avg(N1.Frequency) <= (SELECT SUM(Frequency) FROM Numbers)/2)

# 使用分组函数后没法直接对Number进行运算, 因而使用了子查询

# 总结 197, 262, 511, 512, 534, 550, 570 Easy; 196 Medium; 569, 571 Hard
# 196, 197, 262, 550, 569, 571题需要注意; 注意中位数的构造条件(569,571); DATADIFF(), TIMESTAMPDIFF()时间函数的使用(197); 
  DELETE语句的使用(196); SUM和COUNT计算比率问题(262,550); 
